#!/bin/bash
# Author
#    Giorgio Negrini
#
# Script
#    install
#
# Description
#    Installs OpenFOAM-vim extension for OpenFOAM.
#
#------------------------------------------------------------------------------
cd ${0%/*} || exit 1

# Functions
#------------------------------------------------------------------------------

function getPatternTypeNames {
    grepopts=$1
    shift 1
    grep -hr " TypeName(" $@ 2>/dev/null | $grepopts | sed -e "s/TypeName//g" -e "s/[\"(); ]//g" | sort | uniq | tr '\n' ' '
}

function getTypeNames {
    grep -hr " TypeName(" $@ 2>/dev/null | sed -e "s/TypeName//g" -e "s/[\"(); ]//g" | sort | uniq | tr '\n' ' '
}

function getTypeKeys {
    [[ $# -ne 0 ]] && grep -ri dict $@ 2>/dev/null | grep -v Coeffs | grep -o "\"[a-zA-Z0-9]*\"" | sort | uniq | sed "s/\"//g" | tr '\n' ' '
}

function getFunctionObjects {
    local con=$(simpleFoam -listFunctionObjects 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    echo $con $mod $opt | sort | uniq
}

function getFvOptions {
    local con=$(simpleFoam -listFvConstraints 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    local mod=$(simpleFoam -listFvModels 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    local opt=$(simpleFoam -listFvOptions 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    echo $con $mod $opt | sort | uniq
}

function getMomentumModels {
    local oldmtm=$(simpleFoam -listTurbulenceModels 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    local newmtm=$(simpleFoam -listMomentumTransportModels 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    local laminar=$(find $FOAM_SRC -wholename *laminar/Stokes 2>/dev/null | xargs dirname)
    local laminar=$(getTypeNames $laminar)
    echo $oldmtm $newmtm $laminar | sort | uniq
}

function getBCs {
    local sca=$(simpleFoam -listScalarBCs 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    local vec=$(simpleFoam -listVectorBCs 2>/dev/null | grep "^[a-zA-Z]*$" | sed /^$/d | tr '\n' ' ')
    echo $sca $vec | sort | uniq
}

function subSequence {
    file=$1
    pattern=$2
    shift 2
    for i in $@
    do
        sed -i "s/$pattern/\\\\ $i\n    $pattern/g" $file
    done
}


#
#------------------------------------------------------------------------------
error() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    exit 1
}

[[ ! $WM_PROJECT = "" ]] || error "No OpenFOAM was found"


# Define the folder where your plugins are stored
#------------------------------------------------------------------------------
[[ ! $VIMFOLDER = "" ]] || VIMFOLDER=$HOME/.vim

# Color definition for nice output and playing with bash
#------------------------------------------------------------------------------
red='\e[0;31m'
green='\e[0;32m'
nc='\e[0m'

# Checking if .vim directories are available and create if bool = false
#------------------------------------------------------------------------------
if [ ! -d $VIMFOLDER ]; then
    mkdir -p $VIMFOLDER
fi

if [ ! -d $VIMFOLDER/syntax ]; then
    mkdir -p $VIMFOLDER/syntax
fi

if [ ! -d $VIMFOLDER/syntax/OpenFOAM ]; then
    mkdir -p $VIMFOLDER/syntax/OpenFOAM
fi

if [ ! -d $VIMFOLDER/indent ]; then
    mkdir -p $VIMFOLDER/indent
fi

if [ ! -d $VIMFOLDER/ftdetect ]; then
    mkdir -p $VIMFOLDER/ftdetect
fi


# COLORS
#------------------------------------------------------------------------------
ORANGE='\033[0;33m'
BORANGE='\033[1;33m'
GREEN='\033[0;36m'
BGREEN='\033[1;36m'
BLUE='\033[0;34m'
BBLUE='\033[1;34m'

# Copy files only if the copied files are newer [-u]
#------------------------------------------------------------------------------
echo -e "\nInstalling OpenFOAM-vim for "$WM_PROJECT-$WM_PROJECT_VERSION" in $VIMFOLDER...\n"
cp -r syntax/* $VIMFOLDER/syntax/
cp ftdetect/* $VIMFOLDER/ftdetect/
cp indent/* $VIMFOLDER/indent/
echo -e "\n${ORANGE}You can add custom highlightings in your local version of OpenFOAM-vim:${nc}"
echo -e "    syntax keyword custom<Type>\n    highlight link custom<Type> OpenFOAM_<type>\n\n"


# Function 1 and 2
echo "Functions"
general=$VIMFOLDER/syntax/OpenFOAM/general/general.vim
functions=$(getTypeNames $FOAM_SRC/OpenFOAM/primitives/functions/Function[12]*)
subSequence $general "__FUNCTIONS12__" $functions
sed -i "/__FUNCTIONS12__/d" $general

# Boundary conditions
echo "Boundary conditions"
BC=$VIMFOLDER/syntax/OpenFOAM/0/BC.vim
bcs=$(getBCs)
subSequence $BC "__BCS__" $bcs
sed -i "/__BCS__/d" $BC
# - keywords
for b in $bcs
do
    bfolder=$(find $FOAM_SRC -name $b)
    bcskeys=$(getTypeKeys $bfolder)
    subSequence $BC "__BCSKEYS__" $bcskeys
done
sed -i "/__BCSKEYS__/d" $BC

# Mesh changers
echo "Mesh changers"
DYN=$VIMFOLDER/syntax/OpenFOAM/constant/dynamicMeshDict.vim
ms=$(getPatternTypeNames "grep -i Motion" $FOAM_SRC/dynamicMesh/motionSolvers/ $FOAM_SRC/rigidBody* $FOAM_SRC/sixDoFRigidBody*)
subSequence $DYN "__MS__" $ms
sed -i "/__MS__/d" $DYN
sms=$(getPatternTypeNames "grep -vi Motion" $FOAM_SRC/dynamicMesh/motionSolvers/ $FOAM_SRC/rigidBody* $FOAM_SRC/sixDoFRigidBody*)
subSequence $DYN "__SMS__" $sms
sed -i "/__SMS__/d" $DYN
# - keywords
for m in $ms $sms
do
    mfolder=$(find $FOAM_SRC -name $m)
    mckeys=$(getTypeKeys $mfolder)
    subSequence $DYN "__MCKEYS__" $bcskeys
done
sed -i "/__MCKEYS__/d" $DYN

# Function objects
echo "Function objects"
CD=$VIMFOLDER/syntax/OpenFOAM/system/controlDict.vim
functions=$(getFunctionObjects)
subSequence $CD "__FOS__" $functions
sed -i "/__FOS__/d" $CD
# - keywords
for f in $functions
do
    ffolder=$(find $FOAM_SRC -name $f)
    fokeys=$(getTypeKeys $ffolder)
    subSequence $CD "__FOKEYS__" $fokeys
done
sed -i "/__FOKEYS__/d" $CD

# Algebraic solvers
echo "Solvers"
FVS=$VIMFOLDER/syntax/OpenFOAM/system/fvSolution.vim
sol=$(getTypeNames $FOAM_SRC/OpenFOAM/matrices/lduMatrix/*ers)
subSequence $FVS "__SOL__" $sol
sed -i "/__SOL__/d" $FVS

# Discretization schemes
echo "Discretisation schemes"
FVS=$VIMFOLDER/syntax/OpenFOAM/system/fvSchemes.vim
sch=$(getTypeNames $FOAM_SRC/finiteVolume/finiteVolume/*Schemes $FOAM_SRC/finiteVolume/interpolation/)
subSequence $FVS "__SCH__" $sch
sed -i "/__SCH__/d" $FVS

# Topo sets
echo "Sets"
SFD=$VIMFOLDER/syntax/OpenFOAM/system/setFieldsDict.vim
topo=$(getTypeNames $FOAM_SRC/meshTools/sets/)
subSequence $SFD "__TS__" $topo
sed -i "/__TS__/d" $SFD

# Fv options/models/constraints
echo "Equation sources"
FVO=$VIMFOLDER/syntax/OpenFOAM/constant/fvOptions.vim
fvs=$(getFvOptions)
subSequence $FVO "__FVO__" $fvs
sed -i "/__FVO__/d" $FVO
# - keywords
for f in $fvs
do
    ffolder=$(find $FOAM_SRC -name $f)
    fvokeys=$(getTypeKeys $ffolder)
    subSequence $FVO "__FVOKEYS__" $fvokeys
done
sed -i "/__FVOKEYS__/d" $FVO

# Turbulence models
echo "Momentum models"
MT=$VIMFOLDER/syntax/OpenFOAM/constant/momentumTransport.vim
mtm=$(getMomentumModels)
subSequence $MT "__TT__" $mtm
sed -i "/__TT__/d" $MT
# - keywords and subdictionaries
for m in $mtm
do
    mfolder=$(find $FOAM_SRC -name $m)
    mtmkeys=$(getTypeKeys $mfolder)
    subSequence $MT "__TTKEYS__" $mtmkeys
done
sed -i "/__TTKEYS__/d" $MT


echo -e "\n\nLook at beginning of the following files to insert custom:"
echo "    - fields:                         ~/.vim/syntax/OpenFOAM/general/variables.vim"
echo "    - boundary conditons:             ~/.vim/syntax/OpenFOAM/0/BC.vim"
echo "    - mesh changers:                  ~/.vim/syntax/OpenFOAM/constant/dynamicMeshDict.vim"
echo "    - function objects:               ~/.vim/syntax/OpenFOAM/system/controlDict.vim"
echo "    - extrude models:                 ~/.vim/syntax/OpenFOAM/system/blockMeshDict.vim"
echo "    - fvOptions/Models/Constraints:   ~/.vim/syntax/OpenFOAM/constant/fvOptions.vim"
echo "    - turbulence/viscosity models:    ~/.vim/syntax/OpenFOAM/constant/momentumTransport.vim"


#------------------------------------------------------------------------------
echo -e "\n\n${nc}
The package is now ready to use! Just open an OpenFOAM file!

${BBLUE}OpenFOAM-vim${nc} by ${BORANGE}Giorgio Negrini${nc}

Credits to ${BGREEN}F. Leinbach${nc} and ${BGREEN}T. Holzmann${nc} for the original extension
-->  https://bitbucket.org/shor-ty/vimextensionopenfoam/src/master/  <--
"


#------------------------------------------------------------------------------
